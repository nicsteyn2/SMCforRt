{
  "hash": "43898e52bc5a960c6fc29e09dd9173dd",
  "result": {
    "engine": "jupyter",
    "markdown": "# Imported cases {#sec-models-imported}\n\n::: {#79259337 .cell execution_count=1}\n``` {.julia .cell-code code-fold=\"true\"}\n# Setting up\nusing Distributions, Plots, Measures\ninclude(\"../src/loadData.jl\")\n```\n:::\n\n\nWe suggested in section @sec-smc-data that separating imported from local cases may be critical when modelling the example data (the first 100 days of the COVID-19 pandemic in New Zealand). Separating the graph of reported cases into local and imported cases demonstrates why:\n\n::: {#cell-fig-models-importsdata .cell execution_count=2}\n``` {.julia .cell-code code-fold=\"true\"}\nY = loadData(\"NZCOVID\")\nbar(Y.date, Y.border + Y.local, label=\"Local\", color=:darkorange)\nbar!(Y.date, Y.border, label=\"Imported\", color=:darkblue)\nplot!(xlabel=\"Date\", ylabel=\"Reported cases\", size=(800,300), margins=3mm)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![Reported cases of COVID-19 in the first 100 days of the pandemic in New Zealand, separated by imported cases (dark blue) and local cases (orange).](models_imports_files/figure-html/fig-models-importsdata-output-1.svg){#fig-models-importsdata}\n:::\n:::\n\n\nThe problem of modelling imported cases has previously been covered by @thompsonImprovedInferenceTimevarying2019, ..., and ...\n\nThis chapter demonstrates one way in which local and imported cases can be distinguished in the sequential hidden-state framework.\n\n## Without quarantine\n\nWe retain the hidden-state model from @sec-models-simple:\n\n$$\n\\log R_t \\sim \\text{Normal}(\\log R_{t-1}, \\sigma)\n$$ {#eq-models-importsstatespace}\n\nand now assume that only local cases $L_t$ are infected by past local and imported $M_t$ cases:\n\n$$\nL_t | R_t \\sim \\text{Poisson}\\left(R_t \\Lambda_t^{(m)}\\right)\n$$ {#eq-models-importsobs}\n\nwhere \n\n$$\n\\Lambda_t^{(m)} = \\sum_{u=1}^{u_{max}} \\omega_u \\left(L_{t-u} + M_{t-u}\\right)\n$$ {#eq-models-importsobsforce}\n\nThe bootstrap filter for this model is nearly identical to the simple model, we simply change one line (#TODO: install highlight extension and highlight):\n\n::: {#6d5b1122 .cell execution_count=3}\n``` {.julia .cell-code code-fold=\"true\"}\nfunction importedModel(σ, Y::DataFrame, opts::Dict)\n\n    # Extract frequently used options\n    T = opts[\"T\"]\n    N = opts[\"N\"]\n    L = opts[\"L\"]\n\n    # Initialise output matrices\n    R = zeros(N, T) # Using R instead of X to highlight we're estimating Rt\n    W = zeros(N, T)\n\n    # Sample from initial distribution\n    R[:,1] = rand.(opts[\"pR0\"], N)\n\n    # Run the filter\n    for tt = 2:T\n\n        # Project according to the state-space model\n        R[:,tt] = exp.(rand.(Normal.(log.(R[:,tt-1]), σ)))\n\n        # Weight according to the observation model\n        Λ = sum(Y.Ct[tt-1:-1:1] .* ω[1:tt-1])\n        W[:,tt] = pdf.(Poisson.(R[:,tt] .* Λ), Y.local[tt]) # <- This line is the only line that has changed!\n\n        # Resample\n        inds = wsample(1:N, W[:,tt], N; replace=true)\n        R[:, max(tt - L, 1):tt] = R[inds, max(tt - L, 1):tt]\n\n    end\n\n    return(R, W)\n\nend\n```\n:::\n\n\nFitting the model and plotting $R_t$ against our original estmiates reveals substantial differences:\n\n[Single figure to go here]\n\n## With quarantine\n\nThe model above assumed that imported cases are just as infectious as local cases. In \n\n\n\n\n## Concluding remarks\n\n",
    "supporting": [
      "models_imports_files"
    ],
    "filters": [],
    "includes": {}
  }
}