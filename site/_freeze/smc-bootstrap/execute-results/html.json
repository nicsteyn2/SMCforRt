{
  "hash": "4d1ffee883605dac57c65d669551732b",
  "result": {
    "engine": "jupyter",
    "markdown": "# The bootstrap filter {#sec-smc-bootstrap}\n\n\n\nIn this chapter we introduce the **bootstrap filter**.\n\nThe bootstrap filter generates sample-based approximations to the conditional filtering distribution $P(X_t | y_{1:t}, \\theta)$ and conditional smoothing distribution $P(X_t | y_{1:T}, \\theta)$.\n\n*This chapter assumes fixed values of the model parameters $\\theta$. @sec-smc-parameterestimation handles the estimation of $\\theta$.*\n\n\n## Intuition\n\n\\#TODO: write SMC intuition\n\n## Algorithm\n\n\\#TODO: write SMC algorithm\n\n## Example {#sec-smc-bootstrapexample}\n\nFor demonstration, we consider a simple reproduction number estimator. First assume that $\\log R_t$ follows a Gaussian random walk:\n\n$$\\log R_t \\sim \\text{Normal}(\\log R_{t-1}, \\sigma) $$\n\nwhile reported cases are assumed to follow the Poisson renewal model:\n\n$$ C_t \\sim \\text{Poisson}\\left(R_t \\sum_{u=1}^{t-1} C_{t-u} g_u\\right) $$\n\nThe first equation defines our *hidden-state model* while the second equation defines our *observation model*. With only a slight difference[^1], this model is almost identical to that employed by EpiFilter [@paragImprovedEstimationTimevarying2021].\n\n[^1]: @paragImprovedEstimationTimevarying2021 assumes $R_t$ (rather than $\\log R_t$) follows a Gaussian random walk. The standard deviation of this random walk is multiplied by $\\sqrt{R_t}$ to allow $R_t$ to take larger \"jumps\" when it is larger, achieving the same outcome as our log-model. We discuss this further in @sec-other-epifilter.\n\nLeaving parameter estimation to @sec-smc-parameterestimation, we use the following defaults:\n\n::: {#458427ae .cell execution_count=2}\n``` {.julia .cell-code}\n# Serial interval\nω = pdf.(Gamma(2.36, 2.74), 1:100)\nω = ω/sum(ω)\n\n# Smoothing parameter\nσ = 0.15\n\n# Initial distribution for Rt\npR0 = Uniform(0, 10) \n```\n:::\n\n\nCollectively, $\\sigma$, $\\{\\omega_u\\}_{u=1}^{u_{max}}$, and $P(R_0)$ constitute the model parameters $\\theta$.\n\n\n### Data {#sec-smc-data}\n\nWe use data from the first 100 days of the COVID-19 pandemic in New Zealand. Focusing now on total cases (we leave the critical separation of imported and local cases to @sec-models-imported):\n\n::: {#cell-fig-models-nzdata .cell execution_count=3}\n``` {.julia .cell-code code-fold=\"true\"}\nnzdata = loadData(\"NZCOVID\")\nT = length(nzdata.Ct)\nbar(nzdata.date, nzdata.Ct, label=false, xlabel=\"Date\", ylabel=\"Reported cases\", size=(800,300), margins=3mm, color=:darkblue)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![Reported cases from the first 100 days of the COVID-19 pandemic in Aotearoa New Zealand.](smc-bootstrap_files/figure-html/fig-models-nzdata-output-1.svg){#fig-models-nzdata}\n:::\n:::\n\n\n### Setting up\n\nWe need to specify the number of particles $N$ and resampling window $L$:\n\n::: {#6d22ad5f .cell execution_count=4}\n``` {.julia .cell-code}\nN = 10000\nL = 50\n```\n:::\n\n\npre-allocate memory for our particles:\n\n::: {#af0b454a .cell execution_count=5}\n``` {.julia .cell-code}\nX = zeros(N, T)\n```\n:::\n\n\nand sample from the initial distribution:\n\n::: {#62a68c80 .cell execution_count=6}\n``` {.julia .cell-code}\nX[:,1] = rand(pR0, N)\n```\n:::\n\n\n### Implementation\n\nAll that's left to do is run the bootstrap filter:\n\n::: {#87b3d688 .cell execution_count=7}\n``` {.julia .cell-code}\nfor tt = 2:T\n\n    # Project according to the state-space model\n    X[:,tt] = exp.(rand.(Normal.(log.(X[:,tt-1]), σ)))\n\n    # Weight according to the observation model\n    Λ = sum(nzdata.Ct[tt-1:-1:1] .* ω[1:tt-1])\n    W = pdf.(Poisson.(X[:,tt] .* Λ), nzdata.Ct[tt])\n\n    # Resample\n    inds = wsample(1:N, W, N; replace=true)\n    X[:, max(tt - L, 1):tt] = X[inds, max(tt - L, 1):tt]\n\nend\n```\n:::\n\n\n### Results\n\nThe $t^{th}$ column of $X$ is a set of samples from $P(X_t | C_{1:t+L})$. The mean and quantiles of this posterior distribution are found using:\n\n::: {#cell-fig-models-simpleconditionalsmooth .cell execution_count=8}\n``` {.julia .cell-code}\nm = [mean(X[:,tt]) for tt in 1:T]\nl = [quantile(X[:,tt], 0.025) for tt in 1:T]\nu = [quantile(X[:,tt], 0.975) for tt in 1:T]\nplot(m, ribbon=(m-l, u-m), color=:darkgreen, label=false, xlabel=\"Date\", ylabel=\"Reproduction number\", size=(800,300), margins=3mm)\nhline!([1], label=false, color=:black, line=:dash)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![Estimated $R_t$ for the first 100 days of the COVID-19 pandemic. The dashed horizontal line indicates $R_t = 1$. The green line shows the posterior mean and the green shading shows the 95% credible interval.](smc-bootstrap_files/figure-html/fig-models-simpleconditionalsmooth-output-1.svg){#fig-models-simpleconditionalsmooth}\n:::\n:::\n\n\n",
    "supporting": [
      "smc-bootstrap_files"
    ],
    "filters": [],
    "includes": {}
  }
}